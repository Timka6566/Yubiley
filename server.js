import express from 'express';
import cors from 'cors';
import TelegramBot from 'node-telegram-bot-api';
import fs from 'fs/promises';

const TELEGRAM_BOT_TOKEN = '8422053478:AAFRRb-wSHNJhc49m8O5d4-zSOS2iXoWnGg';
const ADMIN_CHAT_IDS = ['5060105414', '6110524452'];
const PORT = 3001;
const DATA_FILE = './data.json';
const GUEST_PAGE_SIZE = 5;

const readData = async () => {
  try {
    const fileContent = await fs.readFile(DATA_FILE, 'utf8');
    return JSON.parse(fileContent);
  } catch (error) {
    if (error.code === 'ENOENT') return [];
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', error);
    return [];
  }
};

const writeData = async (data) => {
  try {
    await fs.writeFile(DATA_FILE, JSON.stringify(data, null, 2), 'utf8');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö:', error);
  }
};

const isAdmin = (chatId) => ADMIN_CHAT_IDS.includes(String(chatId));

const app = express();
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });

app.use(cors());
app.use(express.json());

app.post('/api/rsvp', async (req, res) => {
  const newResponse = req.body;
  console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', newResponse);
  const allResponses = await readData();
  allResponses.push(newResponse);
  await writeData(allResponses);
  console.log('–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤', DATA_FILE);
  const { name, attendance, alcohol, message } = newResponse;
  const messageText = `
üîî *–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç!* 

*–ò–º—è:* ${name}
*–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ:* ${attendance === 'yes' ? '‚úÖ –î–∞' : attendance === 'maybe' ? 'ü§î –í–æ–∑–º–æ–∂–Ω–æ' : '‚ùå –ù–µ—Ç'}
*–ê–ª–∫–æ–≥–æ–ª—å:* ${alcohol.join(', ') || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
*–°–æ–æ–±—â–µ–Ω–∏–µ:*
${message || '–ø—É—Å—Ç–æ'}
  `;
  const sendPromises = ADMIN_CHAT_IDS.map(chatId => bot.sendMessage(chatId, messageText, { parse_mode: 'Markdown' }));
  try {
    await Promise.all(sendPromises);
    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
    res.status(200).json({ success: true, message: '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.response ? error.response.body : error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram.' });
  }
});


const sendGuestList = async (chatId, page = 0, messageId = null, callbackQueryId = null) => {
  const allResponses = await readData();
  const attendingGuests = allResponses
    .map((guest, index) => ({ ...guest, originalIndex: index }))
    .filter(g => g.attendance === 'yes');
  if (attendingGuests.length === 0) {
    bot.sendMessage(chatId, '‚ÑπÔ∏è –ü–æ–∫–∞ —á—Ç–æ –Ω–∏ –æ–¥–∏–Ω –≥–æ—Å—Ç—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ.');
    return;
  }
  const totalPages = Math.ceil(attendingGuests.length / GUEST_PAGE_SIZE);
  const currentPage = Math.max(0, Math.min(page, totalPages - 1));
  const startIndex = currentPage * GUEST_PAGE_SIZE;
  const guestsOnPage = attendingGuests.slice(startIndex, startIndex + GUEST_PAGE_SIZE);
  let text = `üë• *–°–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage + 1}/${totalPages})*\n\n`;
  const keyboard = [];
  guestsOnPage.forEach(guest => {
    text += `--- ---\nüë§ *${guest.name}*\nü•Ç –ê–ª–∫–æ–≥–æ–ª—å: ${guest.alcohol.join(', ') || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: _${guest.message || '–ø—É—Å—Ç–æ'} _\n`;
    keyboard.push([{ 
      text: `‚ùå –£–¥–∞–ª–∏—Ç—å ${guest.name.split(' ')[0]}`, 
      callback_data: `delete_${guest.originalIndex}_${currentPage}` 
    }]);
  });
  const paginationButtons = [];
  if (currentPage > 0) {
    paginationButtons.push({ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: `list_page_${currentPage - 1}` });
  }
  paginationButtons.push({ text: `–°—Ç—Ä. ${currentPage + 1}/${totalPages}`, callback_data: 'noop' });
  if (currentPage < totalPages - 1) {
    paginationButtons.push({ text: '–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è', callback_data: `list_page_${currentPage + 1}` });
  }
  keyboard.push(paginationButtons);
  const options = {
    parse_mode: 'Markdown',
    reply_markup: { inline_keyboard: keyboard }
  };
  try {
    if (messageId) {
      await bot.editMessageText(text, { chat_id: chatId, message_id: messageId, ...options });
    } else {
      await bot.sendMessage(chatId, text, options);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ—Å—Ç–µ–π:", error);
    if (callbackQueryId && error.response && error.response.body.description.includes("message is not modified")) {
        bot.answerCallbackQuery(callbackQueryId, { text: "–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π." });
    } else if (!messageId) {
        bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.");
    }
  }
};

bot.onText( /\/start/, (msg) => {
  if (!isAdmin(msg.chat.id)) return;
  bot.sendMessage(msg.chat.id, "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ö–æ–º–∞–Ω–¥—ã:\n/stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/list - –°–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π\n/alcohol - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–ª–∫–æ–≥–æ–ª—é");
});

bot.onText( /\/list/, async (msg) => {
  if (!isAdmin(msg.chat.id)) return;
  sendGuestList(msg.chat.id, 0);
});

bot.onText( /\/alcohol/, async (msg) => {
    if (!isAdmin(msg.chat.id)) {
        bot.sendMessage(msg.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.");
        return;
    }
    const responses = await readData();
    const attendingGuests = responses.filter(r => r.attendance === 'yes');

    if (attendingGuests.length === 0) {
        bot.sendMessage(msg.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –≥–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–¥—É—Ç.");
        return;
    }

    const alcoholPreferences = {};
    let totalAlcoholChoices = 0;

    attendingGuests.forEach(guest => {
        if (guest.alcohol && guest.alcohol.length > 0) {
            guest.alcohol.forEach(drink => {
                if (drink !== '–ù–µ –ø—å—é –∞–ª–∫–æ–≥–æ–ª—å') {
                    alcoholPreferences[drink] = (alcoholPreferences[drink] || 0) + 1;
                    totalAlcoholChoices++;
                }
            });
        }
    });

    if (totalAlcoholChoices === 0) {
        bot.sendMessage(msg.chat.id, "–ù–∏–∫—Ç–æ –∏–∑ –≥–æ—Å—Ç–µ–π –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª –∞–ª–∫–æ–≥–æ–ª—å.");
        return;
    }

    let message = `üçæ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–ª–∫–æ–≥–æ–ª—é*\n\n–í—Å–µ–≥–æ –≤—ã–±—Ä–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: *${totalAlcoholChoices}*\n\n*–ü–æ —Ç–∏–ø–∞–º:*\n`;
    for (const [drink, count] of Object.entries(alcoholPreferences)) {
        message += `  - ${drink}: *${count}*\n`;
    }

    bot.sendMessage(msg.chat.id, message, { parse_mode: 'Markdown' });
});

bot.onText( /\/stats/, async (msg) => {
    if (!isAdmin(msg.chat.id)) {
        bot.sendMessage(msg.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.");
        return;
    }
    const responses = await readData();
    if (!responses || responses.length === 0) {
        bot.sendMessage(msg.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤.");
        return;
    }
    const totalResponses = responses.length;
    const attending = responses.filter(r => r.attendance === 'yes');
    const notAttending = responses.filter(r => r.attendance === 'no');
    const maybe = responses.filter(r => r.attendance === 'maybe');
    const alcoholPreferences = {};
    const nonDrinkers = new Set();
    attending.forEach(guest => {
        if (guest.alcohol && guest.alcohol.length > 0) {
            if (guest.alcohol.includes('–ù–µ –ø—å—é –∞–ª–∫–æ–≥–æ–ª—å')) {
                nonDrinkers.add(guest.name);
            } else {
                guest.alcohol.forEach(drink => {
                    alcoholPreferences[drink] = (alcoholPreferences[drink] || 0) + 1;
                });
            }
        } else {
            nonDrinkers.add(guest.name);
        }
    });
    const drinkersCount = attending.length - nonDrinkers.size;
    let statsMessage = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Å—Ç—è–º*\n\n–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: *${totalResponses}*\n\n`;
    statsMessage += `*–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ:*
`;
    statsMessage += `  - ‚úÖ –ü—Ä–∏–¥—É—Ç: *${attending.length}*
`;
    statsMessage += `  - ‚ùå –ù–µ –ø—Ä–∏–¥—É—Ç: *${notAttending.length}*
`;
    statsMessage += `  - ü§î –í–æ–∑–º–æ–∂–Ω–æ: *${maybe.length}*
\n`;
    if (attending.length > 0) {
        statsMessage += `*–ò–∑ —Ç–µ—Ö, –∫—Ç–æ –ø—Ä–∏–¥–µ—Ç (${attending.length}):*
`;
        statsMessage += `  - ü•Ç –ü—å—é—â–∏–µ: *${drinkersCount}*
`;
        statsMessage += `  - ü•§ –ù–µ–ø—å—é—â–∏–µ: *${nonDrinkers.size}*
\n`;
        if (Object.keys(alcoholPreferences).length > 0) {
            statsMessage += `*–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∞–ª–∫–æ–≥–æ–ª—é (–≤ /stats):*
`;
            for (const [drink, count] of Object.entries(alcoholPreferences)) {
                statsMessage += `  - ${drink}: *${count}*
`;
            }
        }
    }
    bot.sendMessage(msg.chat.id, statsMessage, { parse_mode: 'Markdown' });
});

bot.on('callback_query', async (callbackQuery) => {
  const msg = callbackQuery.message;
  const data = callbackQuery.data;
  const chatId = msg.chat.id;
  if (!isAdmin(chatId)) {
    bot.answerCallbackQuery(callbackQuery.id, { text: "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤." });
    return;
  }
  if (data === 'noop') {
      bot.answerCallbackQuery(callbackQuery.id);
      return;
  }
  const [action, ...params] = data.split('_');
  if (action === 'list' && params[0] === 'page') {
    const page = parseInt(params[1], 10);
    await sendGuestList(chatId, page, msg.message_id, callbackQuery.id);
    bot.answerCallbackQuery(callbackQuery.id);
  }
  if (action === 'delete') {
    const originalIndex = parseInt(params[0], 10);
    const currentPage = parseInt(params[1], 10);
    const allResponses = await readData();
    const guestToDelete = allResponses[originalIndex];
    if (guestToDelete) {
        const updatedResponses = allResponses.filter((_, index) => index !== originalIndex);
        await writeData(updatedResponses);
        console.log(`–ê–¥–º–∏–Ω ${chatId} —É–¥–∞–ª–∏–ª –≥–æ—Å—Ç—è:`, guestToDelete);
        bot.answerCallbackQuery(callbackQuery.id, { text: `‚úÖ –ì–æ—Å—Ç—å "${guestToDelete.name}" —É–¥–∞–ª–µ–Ω.` });
        await sendGuestList(chatId, currentPage, msg.message_id, callbackQuery.id);
    } else {
        bot.answerCallbackQuery(callbackQuery.id, { text: '‚ö†Ô∏è –û—à–∏–±–∫–∞: –ì–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —É–¥–∞–ª–µ–Ω?', show_alert: true });
    }
  }
});

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

console.log('–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling...');
